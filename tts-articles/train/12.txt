FastSpeech: Fast, Robust and Controllable Text to Speech

Abstract

Neural network based end-to-end text to speech (TTS) has significantly improved the quality of synthesized speech. 
Prominent methods (e.g., Tacotron 2) usually first generate mel-spectrogram from text, and then synthesize speech from the mel-spectrogram using vocoder such as WaveNet. 
Compared with traditional concatenative and statistical parametric approaches, neural network based end-to-end models suffer from slow inference speed, and the synthesized speech is usually not robust (i.e., some words are skipped or repeated) and lack of controllability (voice speed or prosody control). 
In this work, we propose a novel feed-forward network based on Transformer to generate mel-spectrogram in parallel for TTS. 
Specifically, we extract attention alignments from an encoder-decoder based teacher model for phoneme duration prediction, which is used by a length regulator to expand the source phoneme sequence to match the length of the target mel-spectrogram sequence for parallel mel-spectrogram generation. 
Experiments on the LJSpeech dataset show that our parallel model matches autoregressive models in terms of speech quality, nearly eliminates the problem of word skipping and repeating in particularly hard cases, and can adjust voice speed smoothly. 
Most importantly, compared with autoregressive Transformer TTS, our model speeds up mel-spectrogram generation by 270x and the end-to-end speech synthesis by 38x.
Therefore, we call our model FastSpeech.

Synthesized speech samples can be found in https://speechresearch.github.io/fastspeech/.

Introduction

Text to speech (TTS) has attracted a lot of attention in recent years due to the advance in deep learning. Deep neural network based systems have become more and more popular for TTS, such as Tacotron, Tacotron 2, Deep Voice 3, and the fully end-to-end ClariNet. 
Those models usually first generate mel-spectrogram autoregressively from text input and then synthesize speech from the mel-spectrogram using vocoder such as Griffin-Lim, WaveNet, Parallel WaveNet, or WaveGlow. 
Neural network based TTS has outperformed conventional concatenative and statistical parametric approaches in terms of speech quality.
In current neural network based TTS systems, mel-spectrogram is generated autoregressively. 
Due to the long sequence of the mel-spectrogram and the autoregressive nature, those systems face several challenges:
• Slow inference speed for mel-spectrogram generation. 
Although CNN and Transformer based TTS can speed up the training over RNN-based models , all models generate a mel-spectrogram conditioned on the previously generated mel-spectrograms and suffer from slow inference speed, given the mel-spectrogram sequence is usually with a length of hundreds or thousands.
• Synthesized speech is usually not robust. 
Due to error propagation and the wrong attention alignments between text and speech in the autoregressive generation, the generated mel-spectrogram is usually deficient with the problem of words skipping and repeating.
• Synthesized speech is lack of controllability. 
Previous autoregressive models generate mel-spectrograms one by one automatically, without explicitly leveraging the alignments between text and speech. 
As a consequence, it is usually hard to directly control the voice speed and prosody in the autoregressive generation.

Considering the monotonous alignment between text and speech, to speed up mel-spectrogram generation, in this work, we propose a novel model, FastSpeech, which takes a text (phoneme) sequence as input and generates mel-spectrograms non-autoregressively. 
It adopts a feed-forward network based on the self-attention in Transformer and 1D convolution.
Since a mel-spectrogram sequence is much longer than its corresponding phoneme sequence, in order to solve the problem of length mismatch between the two sequences, FastSpeech adopts a length regulator that up-samples the phoneme sequence according to the phoneme duration (i.e., the number of mel-spectrograms that each phoneme corresponds to) to match the length of the mel-spectrogram sequence. 
The regulator is built on a phoneme duration predictor, which predicts the duration of each phoneme.

Our proposed FastSpeech can address the above-mentioned three challenges as follows:
• Through parallel mel-spectrogram generation, FastSpeech greatly speeds up the synthesis process.
• Phoneme duration predictor ensures hard alignments between a phoneme and its mel-spectrograms, which is very different from soft and automatic attention alignments in the autoregressive models. 
Thus, FastSpeech avoids the issues of error propagation and wrong attention alignments, consequently reducing the ratio of the skipped words and repeated words.
• The length regulator can easily adjust voice speed by lengthening or shortening the phoneme duration to determine the length of the generated mel-spectrograms, and can also control part of the prosody by adding breaks between adjacent phonemes.

We conduct experiments on the LJSpeech dataset to test FastSpeech. 
The results show that in terms of speech quality, FastSpeech nearly matches the autoregressive Transformer model. 
Furthermore, FastSpeech achieves 270x speedup on mel-spectrogram generation and 38x speedup on final speech synthesis compared with the autoregressive Transformer TTS model, almost eliminates the problem of word skipping and repeating, and can adjust voice speed smoothly. 
We attach some audio files generated by our method in the supplementary materials.

Although ClariNet is fully end-to-end, it still first generates mel-spectrogram autoregressively and then synthesizes speech in one model.

Background

In this section, we briefly overview the background of this work, including text to speech, sequence to sequence learning, and non-autoregressive sequence generation.

Text to Speech — TTS, which aims to synthesize natural and intelligible speech given text, has long been a hot research topic in the field of artificial intelligence. 
The research on TTS has shifted from early concatenative synthesis , statistical parametric synthesis to neural network based parametric synthesis and end-to-end models, and the quality of the synthesized speech by end-to-end models is close to human parity. 
Neural network based end-to-end TTS models usually first convert the text to acoustic features (e.g., mel-spectrograms) and then transform mel-spectrograms into audio samples. 
However, most neural TTS systems generate mel-spectrograms autoregressively, which suffers from slow inference speed, and synthesized speech usually lacks of robustness (word skipping and repeating) and controllability (voice speed or prosody control). 
In this work, we propose FastSpeech to generate mel-spectrograms non-autoregressively, which sufficiently handles the above problems.

Sequence to Sequence Learning — Sequence to sequence learning is usually built on the encoder-decoder framework: The encoder takes the source sequence as input and generates a set of representations. 
After that, the decoder estimates the conditional probability of each target element given the source representations and its preceding elements. 
The attention mechanism is further introduced between the encoder and decoder in order to find which source representations to focus on when predicting the current element, and is an important component for sequence to sequence learning.
In this work, instead of using the conventional encoder-attention-decoder framework for sequence to sequence learning, we propose a feed-forward network to generate a sequence in parallel.

Non-Autoregressive Sequence Generation — Unlike autoregressive sequence generation, non-autoregressive models generate sequence in parallel, without explicitly depending on the previous elements, which can greatly speed up the inference process. 
Non-autoregressive generation has been studied in some sequence generation tasks such as neural machine translation and audio synthesis. 
Our FastSpeech differs from the above works in two aspects: 1) Previous works adopt non-autoregressive generation in neural machine translation or audio synthesis mainly for inference speedup, while FastSpeech focuses on both inference speedup and improving the robustness and controllability of the synthesized speech in TTS. 
2) For TTS, although Parallel WaveNet, ClariNet and WaveGlow generate audio in parallel, they are conditioned on mel-spectrograms, which are still generated autoregressively. 
Therefore, they do not address the challenges considered in this work. 
There is a concurrent work that also generates mel-spectrogram in parallel. 
However, it still adopts the encoder-decoder framework with attention mechanism, which 1) requires 2∼3x model parameters compared with the teacher model and thus achieves slower inference speedup than FastSpeech; 2) cannot totally solve the problems of word skipping and repeating while FastSpeech nearly eliminates these issues.

FastSpeech

In this section, we introduce the architecture design of FastSpeech. 
To generate a target mel-spectrogram sequence in parallel, we design a novel feed-forward structure, instead of using the encoder-attention-decoder based architecture as adopted by most sequence to sequence based autoregressive and non-autoregressive generation. 
The overall model architecture of FastSpeech is shown in Figure . 
We describe the components in detail in the following subsections.

Feed-Forward Transformer

The architecture for FastSpeech is a feed-forward structure based on self-attention in Transformer and 1D convolution. 
We call this structure as Feed-Forward Transformer (FFT), as shown in Figure . 
Feed-Forward Transformer stacks multiple FFT blocks for phoneme to mel-spectrogram transformation, with N blocks on the phoneme side, and N blocks on the mel-spectrogram side, with a length regulator (which will be described in the next subsection) in between to bridge the length gap between the phoneme and mel-spectrogram sequence. 
Each FFT block consists of a self-attention and 1D convolutional network, as shown in Figure . 
The self-attention network consists of a multi-head attention to extract the cross-position information. 
Different from the 2-layer dense network in Transformer, we use a 2-layer 1D convolutional network with ReLU activation. 
The motivation is that the adjacent hidden states are more closely related in the character/phoneme and mel-spectrogram sequence in speech tasks. 
We evaluate the effectiveness of the 1D convolutional network in the experimental section. 
Following Transformer, residual connections, layer normalization, and dropout are added after the self-attention network and 1D convolutional network respectively.

Length Regulator

The length regulator (Figure ) is used to solve the problem of length mismatch between the phoneme and spectrogram sequence in the Feed-Forward Transformer, as well as to control the voice speed and part of prosody. 
The length of a phoneme sequence is usually smaller than that of its mel-spectrogram sequence, and each phoneme corresponds to several mel-spectrograms. 
We refer to the length of the mel-spectrograms that corresponds to a phoneme as the phoneme duration (we will describe how to predict phoneme duration in the next subsection). 
Based on the phoneme duration d, the length regulator expands the hidden states of the phoneme sequence d times, and then the total length of the hidden states equals the length of the mel-spectrograms. 
Denote the hidden states of the phoneme sequence as H pho = (h1, h2, ..., hn), where n is the length of the sequence. 
Denote the phoneme duration sequence as D = (d1, d2, ..., dn), where Σni=1 di=m and m is the length of the mel-spectrogram sequence. 
We denote the length regulator LR as
where α is a hyperparameter to determine the length of the expanded sequence Hmel, thereby controlling the voice speed. 
For example, given H pho = (h1, h2, h3, h4) and the corresponding phoneme duration sequence D = (2, 2, 3, 1), the expanded sequence Hmel based on Equation 1 becomes (h1, h1, h2, h2, h3, h3, h3, h4) if α = 1 (normal speed). 
When α = 1.3 (slow speed) and 0.5 (fast speed), the duration sequences become Dα=1.3 = (2.6, 2.6, 3.9, 1.3) ≈ (3, 3, 4, 1) and Dα=0.5 = (1, 1, 1.5, 0.5) ≈ (1, 1, 2, 1), and the expanded sequences become (h1, h1, h1, h2, h2, h2, h3, h3, h3, h3, h4) and (h1, h2, h3, h3, h4) respectively. 
We can also control the break between words by adjusting the duration of the space characters in the sentence, so as to adjust part of prosody of the synthesized speech.

Duration Predictor

Phoneme duration prediction is important for the length regulator. 
As shown in Figure , the duration predictor consists of a 2-layer 1D convolutional network with ReLU activation, each followed by the layer normalization and the dropout layer, and an extra linear layer to output a scalar, which is exactly the predicted phoneme duration. 
Note that this module is stacked on top of the FFT blocks on the phoneme side and is jointly trained with the FastSpeech model to predict the length of mel-spectrograms for each phoneme with the mean square error (MSE) loss. 
We predict the length in the logarithmic domain, which makes them more Gaussian and easier to train. 
Note that the trained duration predictor is only used in the TTS inference phase, because we can directly use the phoneme duration extracted from an autoregressive teacher model in training (see following discussions).

In order to train the duration predictor, we extract the ground-truth phoneme duration from an autoregressive teacher TTS model, as shown in Figure . 
We describe the detailed steps as follows:

• We first train an autoregressive encoder-attention-decoder based Transformer TTS model following .
• For each training sequence pair, we extract the decoder-to-encoder attention alignments from the trained teacher model. 
There are multiple attention alignments due to the multi-head self-attention , and not all attention heads demonstrate the diagonal property (the phoneme and mel-spectrogram sequence are monotonously aligned). 
We propose a focus P S rate F to measure how an attention head is close to diagonal: F = S 1 s=1 max 1≤t≤T a s,t , where S and T are the lengths of the ground-truth spectrograms and phonemes, a s,t donates the element in the s-th row and t-th column of the attention matrix. 
We compute the focus rate for each head and choose the head with the largest F as the attention alignments.
• Finally, we extract the phoneme duration sequence D = (d1, d2, ..., dn) according to the P S duration extractor d i = s=1 (arg max t a s,t = i). 
That is, the duration of a phoneme is the number of mel-spectrograms attended to it according to the attention head selected in the above step.

Experimental Setup

Datasets

We conduct experiments on LJSpeech dataset, which contains 13,100 English audio clips and the corresponding text transcripts, with the total audio length of approximate 24 hours. 
We randomly split the dataset into 3 sets: 12500 samples for training, 300 samples for validation and 300 samples for testing. 
In order to alleviate the mispronunciation problem, we convert the text sequence into the phoneme sequence with our internal grapheme-to-phoneme conversion tool, following .
For the speech data, we convert the raw waveform into mel-spectrograms following . 
Our frame size and hop size are set to 1024 and 256, respectively.
In order to evaluate the robustness of our proposed FastSpeech, we also choose 50 sentences which are particularly hard for TTS system, following the practice in .

Model Configuration

FastSpeech model — Our FastSpeech model consists of 6 FFT blocks on both the phoneme side and the mel-spectrogram side. 
The size of the phoneme vocabulary is 51, including punctuations.
The dimension of phoneme embeddings, the hidden size of the self-attention and 1D convolution in the FFT block are all set to 384. 
The number of attention heads is set to 2. 
The kernel sizes of the 1D convolution in the 2-layer convolutional network are both set to 3, with input/output size of 384/1536 for the first layer and 1536/384 in the second layer. 
The output linear layer converts the 384-dimensional hidden into 80-dimensional mel-spectrogram. 
In our duration predictor, the kernel sizes of the 1D convolution are set to 3, with input/output sizes of 384/384 for both layers.

Autoregressive Transformer TTS model — The autoregressive Transformer TTS model serves two purposes in our work: 1) to extract the phoneme duration as the target to train the duration predictor; 2) to generate mel-spectrogram in the sequence-level knowledge distillation (which will be introduced in the next subsection).
We refer to for the configurations of this model, which consists of a 6-layer encoder, a 6-layer decoder, except that we use 1D convolution network instead of position-wise FFN.
The number of parameters of this teacher model is similar to that of our FastSpeech model.

Training and Inference

We first train the autoregressive Transformer TTS model on 4 NVIDIA V100 GPUs, with batchsize of 16 sentences on each GPU. 
We use the Adam optimizer with β 1 = 0.9, β 2 = 0.98, ε = 10 −9 and follow the same learning rate schedule in . 
It takes 80k steps for training until convergence. 
We feed the text and speech pairs in the training set to the model again to obtain the encoder-decoder attention alignments, which are used to train the duration predictor. 
In addition, we also leverage sequence-level knowledge distillation  that has achieved good performance in non-autoregressive machine translation  to transfer the knowledge from the teacher model to the student model.
For each source text sequence, we generate the mel-spectrograms with the autoregressive Transformer TTS model and take the source text and the generated mel-spectrograms as the paired data for FastSpeech model training.
We train the FastSpeech model together with the duration predictor. 
The optimizer and other hyper-parameters for FastSpeech are the same as the autoregressive Transformer TTS model. 
The FastSpeech model training takes about 80k steps on 4 NVIDIA V100 GPUs. 
In the inference process, the output mel-spectrograms of our FastSpeech model are transformed into audio samples using the pretrained WaveGlow .

https://github.com/NVIDIA/waveglow

Results

In this section, we evaluate the performance of FastSpeech in terms of audio quality, inference speedup, robustness, and controllability.

Audio Quality We conduct the MOS (mean opinion score) evaluation on the test set to measure the audio quality. 
We keep the text content consistent among different models so as to exclude other interference factors, only examining the audio quality. 
Each audio is listened by at least 20 testers, who are all native English speakers. 
We compare the MOS of the generated audio samples by our
FastSpeech model with other systems, which include 1) GT, the ground truth audio; 2) GT (Mel + WaveGlow), where we first convert the ground truth audio into mel-spectrograms, and then convert the mel-spectrograms back to audio using WaveGlow; 3) Tacotron 2 (Mel + WaveGlow); 4) Transformer TTS (Mel + WaveGlow). 
5) Merlin (WORLD), a popular parametric TTS system with WORLD as the vocoder. 
The results are shown in Table . 
It can be seen that our FastSpeech can nearly match the quality of the Transformer TTS model and Tacotron 2.

Table: The MOS with 95% confidence intervals.

Inference Speedup We evaluate the inference latency of FastSpeech compared with the autoregressive Transformer TTS model, which has similar number of model parameters with FastSpeech.
We first show the inference speedup for mel-spectrogram generation in Table. 
It can be seen that FastSpeech speeds up the mel-spectrogram generation by 269.40x, compared with the Transformer TTS model. 
We then show the end-to-end speedup when using WaveGlow as the vocoder. 
It can be seen that FastSpeech can still achieve 38.30x speedup for audio generation.

According to our further comprehensive experiments on our internal datasets, the voice quality of FastSpeech can always match that of the teacher model on multiple languages and multiple voices, if we use more unlabeled text for knowledge distillation.

Table: The comparison of inference latency with 95% confidence intervals. 
The evaluation is conducted on a server with 12 Intel Xeon CPU, 256GB memory, 1 NVIDIA V100 GPU and batch size of 1. 
The average length of the generated mel-spectrograms for the two systems are both about 560.

We also visualize the relationship between the inference latency and the length of the predicted mel-spectrogram sequence in the test set. 
Figure  shows that the inference latency barely increases with the length of the predicted mel-spectrogram for FastSpeech, while increases largely in Transformer TTS. 
This indicates that the inference speed of our method is not sensitive to the length of generated audio due to parallel generation.

Robustness The encoder-decoder attention mechanism in the autoregressive model may cause wrong attention alignments between phoneme and mel-spectrogram, resulting in instability with word repeating and word skipping. 
To evaluate the robustness of FastSpeech, we select 50 sentences which are particularly hard for TTS system. 
Word error counts are listed in Table . 
It can be seen that Transformer TTS is not robust to these hard cases and gets 34% error rate, while FastSpeech can effectively eliminate word repeating and skipping to improve intelligibility.

Table: The comparison of robustness between FastSpeech and other systems on the 50 particularly hard sentences. 
Each kind of word error is counted at most once per sentence.

These cases include single letters, spellings, repeated numbers, and long sentences. We list the cases in the supplementary materials.

Length Control As mentioned in Section , FastSpeech can control the voice speed as well as part of the prosody by adjusting the phoneme duration, which cannot be supported by other end-to-end TTS systems. 
We show the mel-spectrograms before and after the length control, and also put the audio samples in the supplementary material for reference.
Voice Speed The generated mel-spectrograms with different voice speeds by lengthening or shortening the phoneme duration are shown in Figure . 
We also attach several audio samples in the supplementary material for reference. As demonstrated by the samples, FastSpeech can adjust the voice speed from 0.5x to 1.5x smoothly, with stable and almost unchanged pitch.

Breaks Between Words FastSpeech can add breaks between adjacent words by lengthening the duration of the space characters in the sentence, which can improve the prosody of voice. 
We show an example in Figure , where we add breaks in two positions of the sentence to improve the prosody.

Ablation Study We conduct ablation studies to verify the effectiveness of several components in FastSpeech, including 1D Convolution and sequence-level knowledge distillation. 
We conduct CMOS evaluation for these ablation studies.

Table: CMOS comparison in the ablation studies.
 
1D Convolution in FFT Block We propose to replace the original fully connected layer (adopted in Transformer) with 1D convolution in FFT block, as described in Section . 
Here we conduct experiments to compare the performance of 1D convolution to the fully connected layer with similar number of parameters. 
As shown in Table 4, replacing 1D convolution with fully connected layer results in -0.113 CMOS, which demonstrates the effectiveness of 1D convolution. 
Sequence-Level Knowledge Distillation As described in Section, we leverage sequence-level knowledge distillation for FastSpeech. 
We conduct CMOS evaluation to compare the performance of FastSpeech with and without sequence-level knowledge distillation, as shown in Table. 
We find that removing sequence-level knowledge distillation results in -0.325 CMOS, which demonstrates the effectiveness of sequence-level knowledge distillation.

Conclusions

In this work, we have proposed FastSpeech: a fast, robust and controllable neural TTS system.
FastSpeech has a novel feed-forward network to generate mel-spectrogram in parallel, which consists of several key components including feed-forward Transformer blocks, a length regulator and a duration predictor. 
Experiments on LJSpeech dataset demonstrate that our proposed FastSpeech can nearly match the autoregressive Transformer TTS model in terms of speech quality, speed up the mel-spectrogram generation by 270x and the end-to-end speech synthesis by 38x, almost eliminate the problem of word skipping and repeating, and can adjust voice speed (0.5x-1.5x) smoothly.
For future work, we will continue to improve the quality of the synthesized speech, and apply FastSpeech to multi-speaker and low-resource settings. 
We will also train FastSpeech jointly with a parallel neural vocoder to make it fully end-to-end and parallel.
